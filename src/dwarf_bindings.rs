/* automatically generated by rust-bindgen */
#![allow(warnings)]

use std::os::raw::*;

pub enum Struct_Elf { }
pub type dwarf_elf_handle = *mut Struct_Elf;
pub type Dwarf_Bool = ::std::os::raw::c_int;
pub type Dwarf_Off = ::std::os::raw::c_ulonglong;
pub type Dwarf_Unsigned = ::std::os::raw::c_ulonglong;
pub type Dwarf_Half = ::std::os::raw::c_ushort;
pub type Dwarf_Small = ::std::os::raw::c_uchar;
pub type Dwarf_Signed = ::std::os::raw::c_longlong;
pub type Dwarf_Addr = ::std::os::raw::c_ulonglong;
pub type Dwarf_Ptr = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub signature: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Sig8 = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub bl_len: Dwarf_Unsigned,
    pub bl_data: Dwarf_Ptr,
    pub bl_from_loclist: Dwarf_Small,
    pub bl_section_offset: Dwarf_Unsigned,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Block = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub lr_atom: Dwarf_Small,
    pub lr_number: Dwarf_Unsigned,
    pub lr_number2: Dwarf_Unsigned,
    pub lr_offset: Dwarf_Unsigned,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Loc = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub ld_lopc: Dwarf_Addr,
    pub ld_hipc: Dwarf_Addr,
    pub ld_cents: Dwarf_Half,
    pub ld_s: *mut Dwarf_Loc,
    pub ld_from_loclist: Dwarf_Small,
    pub ld_section_offset: Dwarf_Unsigned,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Locdesc = Struct_Unnamed4;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Dwarf_Ranges_Entry_Type {
    DW_RANGES_ENTRY = 0,
    DW_RANGES_ADDRESS_SELECTION = 1,
    DW_RANGES_END = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub dwr_addr1: Dwarf_Addr,
    pub dwr_addr2: Dwarf_Addr,
    pub dwr_type: Enum_Dwarf_Ranges_Entry_Type,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Ranges = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub fp_base_op: Dwarf_Small,
    pub fp_extended_op: Dwarf_Small,
    pub fp_register: Dwarf_Half,
    pub fp_offset: Dwarf_Unsigned,
    pub fp_instr_offset: Dwarf_Off,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Frame_Op = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub fp_base_op: Dwarf_Small,
    pub fp_extended_op: Dwarf_Small,
    pub fp_register: Dwarf_Half,
    pub fp_offset_or_block_len: Dwarf_Unsigned,
    pub fp_expr_block: *mut Dwarf_Small,
    pub fp_instr_offset: Dwarf_Off,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Frame_Op3 = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Regtable_Entry_s {
    pub dw_offset_relevant: Dwarf_Small,
    pub dw_value_type: Dwarf_Small,
    pub dw_regnum: Dwarf_Half,
    pub dw_offset: Dwarf_Addr,
}
impl ::std::clone::Clone for Struct_Dwarf_Regtable_Entry_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Regtable_Entry_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Regtable_Entry = Struct_Dwarf_Regtable_Entry_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Regtable_s {
    pub rules: [Struct_Dwarf_Regtable_Entry_s; 66usize],
}
impl ::std::clone::Clone for Struct_Dwarf_Regtable_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Regtable_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Regtable = Struct_Dwarf_Regtable_s;
pub enum Struct_Dwarf_Reg_value3_s { }
pub type Dwarf_Reg_Value3 = Struct_Dwarf_Reg_value3_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Regtable_Entry3_s {
    pub dw_offset_relevant: Dwarf_Small,
    pub dw_value_type: Dwarf_Small,
    pub dw_regnum: Dwarf_Half,
    pub dw_offset_or_block_len: Dwarf_Unsigned,
    pub dw_block_ptr: Dwarf_Ptr,
}
impl ::std::clone::Clone for Struct_Dwarf_Regtable_Entry3_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Regtable_Entry3_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Regtable_Entry3 = Struct_Dwarf_Regtable_Entry3_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Regtable3_s {
    pub rt3_cfa_rule: Struct_Dwarf_Regtable_Entry3_s,
    pub rt3_reg_table_size: Dwarf_Half,
    pub rt3_rules: *mut Struct_Dwarf_Regtable_Entry3_s,
}
impl ::std::clone::Clone for Struct_Dwarf_Regtable3_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Regtable3_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Regtable3 = Struct_Dwarf_Regtable3_s;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Dwarf_Rel_Type {
    dwarf_drt_none = 0,
    dwarf_drt_data_reloc = 1,
    dwarf_drt_segment_rel = 2,
    dwarf_drt_first_of_length_pair = 3,
    dwarf_drt_second_of_length_pair = 4,
}
pub type Dwarf_P_Marker = *mut Struct_Dwarf_P_Marker_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_P_Marker_s {
    pub ma_marker: Dwarf_Unsigned,
    pub ma_offset: Dwarf_Unsigned,
}
impl ::std::clone::Clone for Struct_Dwarf_P_Marker_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_P_Marker_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Relocation_Data = *mut Struct_Dwarf_Relocation_Data_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Relocation_Data_s {
    pub drd_type: ::std::os::raw::c_uchar,
    pub drd_length: ::std::os::raw::c_uchar,
    pub drd_offset: Dwarf_Unsigned,
    pub drd_symbol_index: Dwarf_Unsigned,
}
impl ::std::clone::Clone for Struct_Dwarf_Relocation_Data_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Relocation_Data_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_P_String_Attr = *mut Struct_Dwarf_P_String_Attr_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_P_String_Attr_s {
    pub sa_offset: Dwarf_Unsigned,
    pub sa_nbytes: Dwarf_Unsigned,
}
impl ::std::clone::Clone for Struct_Dwarf_P_String_Attr_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_P_String_Attr_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_Dwarf_Debug_s { }
pub type Dwarf_Debug = *mut Struct_Dwarf_Debug_s;
pub enum Struct_Dwarf_Die_s { }
pub type Dwarf_Die = *mut Struct_Dwarf_Die_s;
pub enum Struct_Dwarf_Line_s { }
pub type Dwarf_Line = *mut Struct_Dwarf_Line_s;
pub enum Struct_Dwarf_Global_s { }
pub type Dwarf_Global = *mut Struct_Dwarf_Global_s;
pub enum Struct_Dwarf_Func_s { }
pub type Dwarf_Func = *mut Struct_Dwarf_Func_s;
pub enum Struct_Dwarf_Type_s { }
pub type Dwarf_Type = *mut Struct_Dwarf_Type_s;
pub enum Struct_Dwarf_Var_s { }
pub type Dwarf_Var = *mut Struct_Dwarf_Var_s;
pub enum Struct_Dwarf_Weak_s { }
pub type Dwarf_Weak = *mut Struct_Dwarf_Weak_s;
pub enum Struct_Dwarf_Error_s { }
pub type Dwarf_Error = *mut Struct_Dwarf_Error_s;
pub enum Struct_Dwarf_Attribute_s { }
pub type Dwarf_Attribute = *mut Struct_Dwarf_Attribute_s;
pub enum Struct_Dwarf_Abbrev_s { }
pub type Dwarf_Abbrev = *mut Struct_Dwarf_Abbrev_s;
pub enum Struct_Dwarf_Fde_s { }
pub type Dwarf_Fde = *mut Struct_Dwarf_Fde_s;
pub enum Struct_Dwarf_Cie_s { }
pub type Dwarf_Cie = *mut Struct_Dwarf_Cie_s;
pub enum Struct_Dwarf_Arange_s { }
pub type Dwarf_Arange = *mut Struct_Dwarf_Arange_s;
pub enum Struct_Dwarf_P_Debug_s { }
pub type Dwarf_P_Debug = *mut Struct_Dwarf_P_Debug_s;
pub enum Struct_Dwarf_P_Die_s { }
pub type Dwarf_P_Die = *mut Struct_Dwarf_P_Die_s;
pub enum Struct_Dwarf_P_Attribute_s { }
pub type Dwarf_P_Attribute = *mut Struct_Dwarf_P_Attribute_s;
pub enum Struct_Dwarf_P_Fde_s { }
pub type Dwarf_P_Fde = *mut Struct_Dwarf_P_Fde_s;
pub enum Struct_Dwarf_P_Expr_s { }
pub type Dwarf_P_Expr = *mut Struct_Dwarf_P_Expr_s;
pub type Dwarf_Tag = Dwarf_Unsigned;
pub type Dwarf_Handler =
    ::std::option::Option<extern "C" fn(arg1: Dwarf_Error, arg2: Dwarf_Ptr)>;
pub type Dwarf_Obj_Access_Interface = Struct_Dwarf_Obj_Access_Interface_s;
pub type Dwarf_Obj_Access_Methods = Struct_Dwarf_Obj_Access_Methods_s;
pub type Dwarf_Obj_Access_Section = Struct_Dwarf_Obj_Access_Section_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Obj_Access_Section_s {
    pub addr: Dwarf_Addr,
    pub size: Dwarf_Unsigned,
    pub name: *const ::std::os::raw::c_char,
    pub link: Dwarf_Unsigned,
    pub entrysize: Dwarf_Unsigned,
}
impl ::std::clone::Clone for Struct_Dwarf_Obj_Access_Section_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Obj_Access_Section_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed8 { DW_OBJECT_MSB = 0, DW_OBJECT_LSB = 1, }
pub type Dwarf_Endianness = Enum_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Obj_Access_Methods_s {
    pub get_section_info: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                         *mut ::std::os::raw::c_void,
                                                                     section_index:
                                                                         Dwarf_Half,
                                                                     return_section:
                                                                         *mut Dwarf_Obj_Access_Section,
                                                                     error:
                                                                         *mut ::std::os::raw::c_int)
                                                    -> ::std::os::raw::c_int>,
    pub get_byte_order: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                       *mut ::std::os::raw::c_void)
                                                  -> Dwarf_Endianness>,
    pub get_length_size: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                        *mut ::std::os::raw::c_void)
                                                   -> Dwarf_Small>,
    pub get_pointer_size: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> Dwarf_Small>,
    pub get_section_count: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                          *mut ::std::os::raw::c_void)
                                                     -> Dwarf_Unsigned>,
    pub load_section: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                     *mut ::std::os::raw::c_void,
                                                                 section_index:
                                                                     Dwarf_Half,
                                                                 return_data:
                                                                     *mut *mut Dwarf_Small,
                                                                 error:
                                                                     *mut ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    pub relocate_a_section: ::std::option::Option<unsafe extern "C" fn(obj:
                                                                           *mut ::std::os::raw::c_void,
                                                                       section_index:
                                                                           Dwarf_Half,
                                                                       dbg:
                                                                           Dwarf_Debug,
                                                                       error:
                                                                           *mut ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
}
impl ::std::clone::Clone for Struct_Dwarf_Obj_Access_Methods_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Obj_Access_Methods_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Obj_Access_Interface_s {
    pub object: *mut ::std::os::raw::c_void,
    pub methods: *const Dwarf_Obj_Access_Methods,
}
impl ::std::clone::Clone for Struct_Dwarf_Obj_Access_Interface_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Obj_Access_Interface_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Dwarf_Macro_Details_s {
    pub dmd_offset: Dwarf_Off,
    pub dmd_type: Dwarf_Small,
    pub dmd_lineno: Dwarf_Signed,
    pub dmd_fileindex: Dwarf_Signed,
    pub dmd_macro: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_Dwarf_Macro_Details_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Dwarf_Macro_Details_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Macro_Details = Struct_Dwarf_Macro_Details_s;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Dwarf_Form_Class {
    DW_FORM_CLASS_UNKNOWN = 0,
    DW_FORM_CLASS_ADDRESS = 1,
    DW_FORM_CLASS_BLOCK = 2,
    DW_FORM_CLASS_CONSTANT = 3,
    DW_FORM_CLASS_EXPRLOC = 4,
    DW_FORM_CLASS_FLAG = 5,
    DW_FORM_CLASS_LINEPTR = 6,
    DW_FORM_CLASS_LOCLISTPTR = 7,
    DW_FORM_CLASS_MACPTR = 8,
    DW_FORM_CLASS_RANGELISTPTR = 9,
    DW_FORM_CLASS_REFERENCE = 10,
    DW_FORM_CLASS_STRING = 11,
    DW_FORM_CLASS_FRAMEPTR = 12,
}
pub type Dwarf_Callback_Func_c =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2: ::std::os::raw::c_int,
                                               arg3: Dwarf_Unsigned,
                                               arg4: Dwarf_Unsigned,
                                               arg5: Dwarf_Unsigned,
                                               arg6: Dwarf_Unsigned,
                                               arg7: *mut Dwarf_Unsigned,
                                               arg8:
                                                   *mut ::std::os::raw::c_void,
                                               arg9:
                                                   *mut ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type Dwarf_Callback_Func_b =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2: ::std::os::raw::c_int,
                                               arg3: Dwarf_Unsigned,
                                               arg4: Dwarf_Unsigned,
                                               arg5: Dwarf_Unsigned,
                                               arg6: Dwarf_Unsigned,
                                               arg7: *mut Dwarf_Unsigned,
                                               arg8:
                                                   *mut ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type Dwarf_Callback_Func =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2: ::std::os::raw::c_int,
                                               arg3: Dwarf_Unsigned,
                                               arg4: Dwarf_Unsigned,
                                               arg5: Dwarf_Unsigned,
                                               arg6: Dwarf_Unsigned,
                                               arg7:
                                                   *mut ::std::os::raw::c_int,
                                               arg8:
                                                   *mut ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub check_verbose_mode: Dwarf_Bool,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Dwarf_Cmdline_Options = Struct_Unnamed9;
#[link(name = "dwarf")]
extern "C" {
    pub static mut dwarf_cmdline_options: Dwarf_Cmdline_Options;
}
extern "C" {
    pub fn dwarf_frame_get_reg_register(reg_in:
                                            *mut Struct_Dwarf_Regtable_Entry3_s,
                                        offset_relevant: *mut Dwarf_Small,
                                        regnum_out: *mut Dwarf_Half,
                                        offset_out: *mut Dwarf_Signed)
     -> ::std::os::raw::c_int;
    pub fn dwarf_frame_get_reg_expression(reg_in:
                                              *mut Struct_Dwarf_Regtable_Entry3_s,
                                          block_out: *mut Dwarf_Block)
     -> ::std::os::raw::c_int;
    pub fn dwarf_init(arg1: ::std::os::raw::c_int, arg2: Dwarf_Unsigned,
                      arg3: Dwarf_Handler, arg4: Dwarf_Ptr,
                      arg5: *mut Dwarf_Debug, arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_elf_init(arg1: dwarf_elf_handle, arg2: Dwarf_Unsigned,
                          arg3: Dwarf_Handler, arg4: Dwarf_Ptr,
                          arg5: *mut Dwarf_Debug, arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_print_memory_stats(arg1: Dwarf_Debug);
    pub fn dwarf_get_elf(arg1: Dwarf_Debug, arg2: *mut dwarf_elf_handle,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_finish(arg1: Dwarf_Debug, arg2: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_object_init(arg1: *mut Dwarf_Obj_Access_Interface,
                             arg2: Dwarf_Handler, arg3: Dwarf_Ptr,
                             arg4: *mut Dwarf_Debug, arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_object_finish(arg1: Dwarf_Debug, arg2: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_next_cu_header_b(arg1: Dwarf_Debug,
                                  arg2: *mut Dwarf_Unsigned,
                                  arg3: *mut Dwarf_Half, arg4: *mut Dwarf_Off,
                                  arg5: *mut Dwarf_Half,
                                  arg6: *mut Dwarf_Half,
                                  arg7: *mut Dwarf_Half,
                                  arg8: *mut Dwarf_Unsigned,
                                  arg9: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_next_cu_header_c(arg1: Dwarf_Debug, arg2: Dwarf_Bool,
                                  arg3: *mut Dwarf_Unsigned,
                                  arg4: *mut Dwarf_Half, arg5: *mut Dwarf_Off,
                                  arg6: *mut Dwarf_Half,
                                  arg7: *mut Dwarf_Half,
                                  arg8: *mut Dwarf_Half,
                                  arg9: *mut Dwarf_Sig8,
                                  arg10: *mut Dwarf_Unsigned,
                                  arg11: *mut Dwarf_Unsigned,
                                  arg12: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_next_cu_header(arg1: Dwarf_Debug, arg2: *mut Dwarf_Unsigned,
                                arg3: *mut Dwarf_Half, arg4: *mut Dwarf_Off,
                                arg5: *mut Dwarf_Half,
                                arg6: *mut Dwarf_Unsigned,
                                arg7: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_siblingof(arg1: Dwarf_Debug, arg2: Dwarf_Die,
                           arg3: *mut Dwarf_Die, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_siblingof_b(arg1: Dwarf_Debug, arg2: Dwarf_Die,
                             arg3: Dwarf_Bool, arg4: *mut Dwarf_Die,
                             arg5: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_child(arg1: Dwarf_Die, arg2: *mut Dwarf_Die,
                       arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_offdie(arg1: Dwarf_Debug, arg2: Dwarf_Off,
                        arg3: *mut Dwarf_Die, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_offdie_b(arg1: Dwarf_Debug, arg2: Dwarf_Off,
                          arg3: Dwarf_Bool, arg4: *mut Dwarf_Die,
                          arg5: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_get_die_infotypes_flag(arg1: Dwarf_Die) -> Dwarf_Bool;
    pub fn dwarf_pcfile(arg1: Dwarf_Debug, arg2: Dwarf_Addr,
                        arg3: *mut Dwarf_Die, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_pcsubr(arg1: Dwarf_Debug, arg2: Dwarf_Addr,
                        arg3: *mut Dwarf_Die, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_pcscope(arg1: Dwarf_Debug, arg2: Dwarf_Addr,
                         arg3: *mut Dwarf_Die, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_tag(arg1: Dwarf_Die, arg2: *mut Dwarf_Half,
                     arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_dieoffset(arg1: Dwarf_Die, arg2: *mut Dwarf_Off,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_CU_dieoffset_given_die(arg1: Dwarf_Die, arg2: *mut Dwarf_Off,
                                        arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_die_CU_offset(arg1: Dwarf_Die, arg2: *mut Dwarf_Off,
                               arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_die_CU_offset_range(arg1: Dwarf_Die, arg2: *mut Dwarf_Off,
                                     arg3: *mut Dwarf_Off,
                                     arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_attr(arg1: Dwarf_Die, arg2: Dwarf_Half,
                      arg3: *mut Dwarf_Attribute, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_diename(arg1: Dwarf_Die,
                         arg2: *mut *mut ::std::os::raw::c_char,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_die_abbrev_code(arg1: Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_die_abbrev_children_flag(arg1: Dwarf_Die,
                                          arg2: *mut Dwarf_Half)
     -> ::std::os::raw::c_int;
    pub fn dwarf_validate_die_sibling(arg1: Dwarf_Die, arg2: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
    pub fn dwarf_hasattr(arg1: Dwarf_Die, arg2: Dwarf_Half,
                         arg3: *mut Dwarf_Bool, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_loclist_n(arg1: Dwarf_Attribute,
                           arg2: *mut *mut *mut Dwarf_Locdesc,
                           arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_loclist(arg1: Dwarf_Attribute, arg2: *mut *mut Dwarf_Locdesc,
                         arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_loclist_from_expr(dbg: Dwarf_Debug, expression_in: Dwarf_Ptr,
                                   expression_length: Dwarf_Unsigned,
                                   llbuf: *mut *mut Dwarf_Locdesc,
                                   listlen: *mut Dwarf_Signed,
                                   error: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_loclist_from_expr_a(dbg: Dwarf_Debug,
                                     expression_in: Dwarf_Ptr,
                                     expression_length: Dwarf_Unsigned,
                                     addr_size: Dwarf_Half,
                                     llbuf: *mut *mut Dwarf_Locdesc,
                                     listlen: *mut Dwarf_Signed,
                                     error: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_stringlen(arg1: Dwarf_Die, arg2: *mut *mut Dwarf_Locdesc,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_subscrcnt(arg1: Dwarf_Die, arg2: *mut Dwarf_Signed,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_nthsubscr(arg1: Dwarf_Die, arg2: Dwarf_Unsigned,
                           arg3: *mut Dwarf_Die, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lowpc(arg1: Dwarf_Die, arg2: *mut Dwarf_Addr,
                       arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_highpc(arg1: Dwarf_Die, arg2: *mut Dwarf_Addr,
                        arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_bytesize(arg1: Dwarf_Die, arg2: *mut Dwarf_Unsigned,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_isbitfield(arg1: Dwarf_Die, arg2: *mut Dwarf_Bool,
                            arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_bitsize(arg1: Dwarf_Die, arg2: *mut Dwarf_Unsigned,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_bitoffset(arg1: Dwarf_Die, arg2: *mut Dwarf_Unsigned,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_srclang(arg1: Dwarf_Die, arg2: *mut Dwarf_Unsigned,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_arrayorder(arg1: Dwarf_Die, arg2: *mut Dwarf_Unsigned,
                            arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_attrlist(arg1: Dwarf_Die, arg2: *mut *mut Dwarf_Attribute,
                          arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_hasform(arg1: Dwarf_Attribute, arg2: Dwarf_Half,
                         arg3: *mut Dwarf_Bool, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_whatform(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Half,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_whatform_direct(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Half,
                                 arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_whatattr(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Half,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formref(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Off,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_global_formref(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Off,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_formsig8(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Sig8,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formaddr(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Addr,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formflag(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Bool,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formudata(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Unsigned,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formsdata(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Signed,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formblock(arg1: Dwarf_Attribute, arg2: *mut *mut Dwarf_Block,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formstring(arg1: Dwarf_Attribute,
                            arg2: *mut *mut ::std::os::raw::c_char,
                            arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_formexprloc(arg1: Dwarf_Attribute, arg2: *mut Dwarf_Unsigned,
                             arg3: *mut Dwarf_Ptr, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_srclines(arg1: Dwarf_Die, arg2: *mut *mut Dwarf_Line,
                          arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_srclines_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Line,
                                  arg3: Dwarf_Signed);
    pub fn dwarf_srcfiles(arg1: Dwarf_Die,
                          arg2: *mut *mut *mut ::std::os::raw::c_char,
                          arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_dieline(arg1: Dwarf_Die, arg2: *mut Dwarf_Line,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_linebeginstatement(arg1: Dwarf_Line, arg2: *mut Dwarf_Bool,
                                    arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineendsequence(arg1: Dwarf_Line, arg2: *mut Dwarf_Bool,
                                 arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineno(arg1: Dwarf_Line, arg2: *mut Dwarf_Unsigned,
                        arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_line_srcfileno(arg1: Dwarf_Line, arg2: *mut Dwarf_Unsigned,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_line_is_addr_set(arg1: Dwarf_Line, arg2: *mut Dwarf_Bool,
                                  arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineaddr(arg1: Dwarf_Line, arg2: *mut Dwarf_Addr,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_lineoff(arg1: Dwarf_Line, arg2: *mut Dwarf_Signed,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_lineoff_b(arg1: Dwarf_Line, arg2: *mut Dwarf_Unsigned,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_linesrc(arg1: Dwarf_Line,
                         arg2: *mut *mut ::std::os::raw::c_char,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_lineblock(arg1: Dwarf_Line, arg2: *mut Dwarf_Bool,
                           arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_prologue_end_etc(arg1: Dwarf_Line, arg2: *mut Dwarf_Bool,
                                  arg3: *mut Dwarf_Bool,
                                  arg4: *mut Dwarf_Unsigned,
                                  arg5: *mut Dwarf_Unsigned,
                                  arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_pclines(arg1: Dwarf_Debug, arg2: Dwarf_Addr,
                         arg3: *mut *mut Dwarf_Line, arg4: *mut Dwarf_Signed,
                         arg5: Dwarf_Signed, arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_globals(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Global,
                             arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_globals_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Global,
                                 arg3: Dwarf_Signed);
    pub fn dwarf_globname(arg1: Dwarf_Global,
                          arg2: *mut *mut ::std::os::raw::c_char,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_global_die_offset(arg1: Dwarf_Global, arg2: *mut Dwarf_Off,
                                   arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_cu_die_offset_given_cu_header_offset(arg1: Dwarf_Debug,
                                                          arg2: Dwarf_Off,
                                                          arg3:
                                                              *mut Dwarf_Off,
                                                          arg4:
                                                              *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_cu_die_offset_given_cu_header_offset_b(arg1: Dwarf_Debug,
                                                            arg2: Dwarf_Off,
                                                            arg3: Dwarf_Bool,
                                                            arg4:
                                                                *mut Dwarf_Off,
                                                            arg5:
                                                                *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_global_cu_offset(arg1: Dwarf_Global, arg2: *mut Dwarf_Off,
                                  arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_global_name_offsets(arg1: Dwarf_Global,
                                     arg2: *mut *mut ::std::os::raw::c_char,
                                     arg3: *mut Dwarf_Off,
                                     arg4: *mut Dwarf_Off,
                                     arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_funcs(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Func,
                           arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_funcs_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Func,
                               arg3: Dwarf_Signed);
    pub fn dwarf_funcname(arg1: Dwarf_Func,
                          arg2: *mut *mut ::std::os::raw::c_char,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_func_die_offset(arg1: Dwarf_Func, arg2: *mut Dwarf_Off,
                                 arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_func_cu_offset(arg1: Dwarf_Func, arg2: *mut Dwarf_Off,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_func_name_offsets(arg1: Dwarf_Func,
                                   arg2: *mut *mut ::std::os::raw::c_char,
                                   arg3: *mut Dwarf_Off, arg4: *mut Dwarf_Off,
                                   arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_types(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Type,
                           arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_types_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Type,
                               arg3: Dwarf_Signed);
    pub fn dwarf_typename(arg1: Dwarf_Type,
                          arg2: *mut *mut ::std::os::raw::c_char,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_type_die_offset(arg1: Dwarf_Type, arg2: *mut Dwarf_Off,
                                 arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_type_cu_offset(arg1: Dwarf_Type, arg2: *mut Dwarf_Off,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_type_name_offsets(arg1: Dwarf_Type,
                                   arg2: *mut *mut ::std::os::raw::c_char,
                                   arg3: *mut Dwarf_Off, arg4: *mut Dwarf_Off,
                                   arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_pubtypes(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Type,
                              arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_pubtypes_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Type,
                                  arg3: Dwarf_Signed);
    pub fn dwarf_pubtypename(arg1: Dwarf_Type,
                             arg2: *mut *mut ::std::os::raw::c_char,
                             arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_pubtype_die_offset(arg1: Dwarf_Type, arg2: *mut Dwarf_Off,
                                    arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_pubtype_cu_offset(arg1: Dwarf_Type, arg2: *mut Dwarf_Off,
                                   arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_pubtype_name_offsets(arg1: Dwarf_Type,
                                      arg2: *mut *mut ::std::os::raw::c_char,
                                      arg3: *mut Dwarf_Off,
                                      arg4: *mut Dwarf_Off,
                                      arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_vars(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Var,
                          arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_vars_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Var,
                              arg3: Dwarf_Signed);
    pub fn dwarf_varname(arg1: Dwarf_Var,
                         arg2: *mut *mut ::std::os::raw::c_char,
                         arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_var_die_offset(arg1: Dwarf_Var, arg2: *mut Dwarf_Off,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_var_cu_offset(arg1: Dwarf_Var, arg2: *mut Dwarf_Off,
                               arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_var_name_offsets(arg1: Dwarf_Var,
                                  arg2: *mut *mut ::std::os::raw::c_char,
                                  arg3: *mut Dwarf_Off, arg4: *mut Dwarf_Off,
                                  arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_weaks(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Weak,
                           arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_weaks_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Weak,
                               arg3: Dwarf_Signed);
    pub fn dwarf_weakname(arg1: Dwarf_Weak,
                          arg2: *mut *mut ::std::os::raw::c_char,
                          arg3: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_weak_die_offset(arg1: Dwarf_Weak, arg2: *mut Dwarf_Off,
                                 arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_weak_cu_offset(arg1: Dwarf_Weak, arg2: *mut Dwarf_Off,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_weak_name_offsets(arg1: Dwarf_Weak,
                                   arg2: *mut *mut ::std::os::raw::c_char,
                                   arg3: *mut Dwarf_Off, arg4: *mut Dwarf_Off,
                                   arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_loclist_entry(arg1: Dwarf_Debug, arg2: Dwarf_Unsigned,
                                   arg3: *mut Dwarf_Addr,
                                   arg4: *mut Dwarf_Addr,
                                   arg5: *mut Dwarf_Ptr,
                                   arg6: *mut Dwarf_Unsigned,
                                   arg7: *mut Dwarf_Unsigned,
                                   arg8: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_abbrev(arg1: Dwarf_Debug, arg2: Dwarf_Unsigned,
                            arg3: *mut Dwarf_Abbrev,
                            arg4: *mut Dwarf_Unsigned,
                            arg5: *mut Dwarf_Unsigned, arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_abbrev_tag(arg1: Dwarf_Abbrev, arg2: *mut Dwarf_Half,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_abbrev_code(arg1: Dwarf_Abbrev,
                                 arg2: *mut Dwarf_Unsigned,
                                 arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_abbrev_count(arg1: Dwarf_Debug) -> ::std::os::raw::c_int;
    pub fn dwarf_get_abbrev_children_flag(arg1: Dwarf_Abbrev,
                                          arg2: *mut Dwarf_Signed,
                                          arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_abbrev_entry(arg1: Dwarf_Abbrev, arg2: Dwarf_Signed,
                                  arg3: *mut Dwarf_Half,
                                  arg4: *mut Dwarf_Signed,
                                  arg5: *mut Dwarf_Off,
                                  arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_str(arg1: Dwarf_Debug, arg2: Dwarf_Off,
                         arg3: *mut *mut ::std::os::raw::c_char,
                         arg4: *mut Dwarf_Signed, arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_list_eh(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Cie,
                                 arg3: *mut Dwarf_Signed,
                                 arg4: *mut *mut Dwarf_Fde,
                                 arg5: *mut Dwarf_Signed,
                                 arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_list(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Cie,
                              arg3: *mut Dwarf_Signed,
                              arg4: *mut *mut Dwarf_Fde,
                              arg5: *mut Dwarf_Signed, arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_fde_cie_list_dealloc(dbg: Dwarf_Debug,
                                      cie_data: *mut Dwarf_Cie,
                                      cie_element_count: Dwarf_Signed,
                                      fde_data: *mut Dwarf_Fde,
                                      fde_element_count: Dwarf_Signed);
    pub fn dwarf_get_fde_range(arg1: Dwarf_Fde, arg2: *mut Dwarf_Addr,
                               arg3: *mut Dwarf_Unsigned,
                               arg4: *mut Dwarf_Ptr,
                               arg5: *mut Dwarf_Unsigned,
                               arg6: *mut Dwarf_Off, arg7: *mut Dwarf_Signed,
                               arg8: *mut Dwarf_Off, arg9: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_exception_info(arg1: Dwarf_Fde,
                                        arg2: *mut Dwarf_Signed,
                                        arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_cie_of_fde(arg1: Dwarf_Fde, arg2: *mut Dwarf_Cie,
                                arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_cie_info(arg1: Dwarf_Cie, arg2: *mut Dwarf_Unsigned,
                              arg3: *mut Dwarf_Small,
                              arg4: *mut *mut ::std::os::raw::c_char,
                              arg5: *mut Dwarf_Unsigned,
                              arg6: *mut Dwarf_Signed, arg7: *mut Dwarf_Half,
                              arg8: *mut Dwarf_Ptr, arg9: *mut Dwarf_Unsigned,
                              arg10: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_cie_index(arg1: Dwarf_Cie, arg2: *mut Dwarf_Signed,
                               arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_instr_bytes(arg1: Dwarf_Fde, arg2: *mut Dwarf_Ptr,
                                     arg3: *mut Dwarf_Unsigned,
                                     arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_info_for_all_regs(arg1: Dwarf_Fde, arg2: Dwarf_Addr,
                                           arg3: *mut Dwarf_Regtable,
                                           arg4: *mut Dwarf_Addr,
                                           arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_info_for_all_regs3(arg1: Dwarf_Fde, arg2: Dwarf_Addr,
                                            arg3: *mut Dwarf_Regtable3,
                                            arg4: *mut Dwarf_Addr,
                                            arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_info_for_reg(arg1: Dwarf_Fde, arg2: Dwarf_Half,
                                      arg3: Dwarf_Addr,
                                      arg4: *mut Dwarf_Signed,
                                      arg5: *mut Dwarf_Signed,
                                      arg6: *mut Dwarf_Signed,
                                      arg7: *mut Dwarf_Addr,
                                      arg8: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_info_for_reg3(arg1: Dwarf_Fde, arg2: Dwarf_Half,
                                       arg3: Dwarf_Addr,
                                       arg4: *mut Dwarf_Small,
                                       arg5: *mut Dwarf_Signed,
                                       arg6: *mut Dwarf_Signed,
                                       arg7: *mut Dwarf_Signed,
                                       arg8: *mut Dwarf_Ptr,
                                       arg9: *mut Dwarf_Addr,
                                       arg10: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_info_for_cfa_reg3(arg1: Dwarf_Fde, arg2: Dwarf_Addr,
                                           arg3: *mut Dwarf_Small,
                                           arg4: *mut Dwarf_Signed,
                                           arg5: *mut Dwarf_Signed,
                                           arg6: *mut Dwarf_Signed,
                                           arg7: *mut Dwarf_Ptr,
                                           arg8: *mut Dwarf_Addr,
                                           arg9: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_for_die(arg1: Dwarf_Debug, arg2: Dwarf_Die,
                                 arg3: *mut Dwarf_Fde, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_n(arg1: *mut Dwarf_Fde, arg2: Dwarf_Unsigned,
                           arg3: *mut Dwarf_Fde, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_at_pc(arg1: *mut Dwarf_Fde, arg2: Dwarf_Addr,
                               arg3: *mut Dwarf_Fde, arg4: *mut Dwarf_Addr,
                               arg5: *mut Dwarf_Addr, arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_cie_augmentation_data(arg1: Dwarf_Cie,
                                           arg2: *mut *mut Dwarf_Small,
                                           arg3: *mut Dwarf_Unsigned,
                                           arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_fde_augmentation_data(arg1: Dwarf_Fde,
                                           arg2: *mut *mut Dwarf_Small,
                                           arg3: *mut Dwarf_Unsigned,
                                           arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_expand_frame_instructions(arg1: Dwarf_Cie, arg2: Dwarf_Ptr,
                                           arg3: Dwarf_Unsigned,
                                           arg4: *mut *mut Dwarf_Frame_Op,
                                           arg5: *mut Dwarf_Signed,
                                           arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_aranges(arg1: Dwarf_Debug, arg2: *mut *mut Dwarf_Arange,
                             arg3: *mut Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_arange(arg1: *mut Dwarf_Arange, arg2: Dwarf_Unsigned,
                            arg3: Dwarf_Addr, arg4: *mut Dwarf_Arange,
                            arg5: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_get_cu_die_offset(arg1: Dwarf_Arange, arg2: *mut Dwarf_Off,
                                   arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_arange_cu_header_offset(arg1: Dwarf_Arange,
                                             arg2: *mut Dwarf_Off,
                                             arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_arange_info(arg1: Dwarf_Arange, arg2: *mut Dwarf_Addr,
                                 arg3: *mut Dwarf_Unsigned,
                                 arg4: *mut Dwarf_Off, arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_arange_info_b(arg1: Dwarf_Arange,
                                   arg2: *mut Dwarf_Unsigned,
                                   arg3: *mut Dwarf_Unsigned,
                                   arg4: *mut Dwarf_Addr,
                                   arg5: *mut Dwarf_Unsigned,
                                   arg6: *mut Dwarf_Off,
                                   arg7: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn _dwarf_print_lines(arg1: Dwarf_Die, arg2: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_print_lines(arg1: Dwarf_Die, arg2: *mut Dwarf_Error,
                             arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_check_lineheader(arg1: Dwarf_Die,
                                  errcount_out: *mut ::std::os::raw::c_int);
    pub fn _dwarf_ld_sort_lines(arg1: *mut ::std::os::raw::c_void,
                                arg2: ::std::os::raw::c_ulong,
                                arg3: ::std::os::raw::c_int,
                                arg4: *mut ::std::os::raw::c_int,
                                arg5: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_ld_sort_lines(arg1: *mut ::std::os::raw::c_void,
                               arg2: ::std::os::raw::c_ulong,
                               arg3: ::std::os::raw::c_int,
                               arg4: *mut ::std::os::raw::c_int,
                               arg5: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _dwarf_fde_section_offset(dbg: Dwarf_Debug, arg1: Dwarf_Fde,
                                     arg2: *mut Dwarf_Off,
                                     arg3: *mut Dwarf_Off,
                                     arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_fde_section_offset(dbg: Dwarf_Debug, arg1: Dwarf_Fde,
                                    arg2: *mut Dwarf_Off,
                                    arg3: *mut Dwarf_Off,
                                    arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_cie_section_offset(arg1: Dwarf_Debug, arg2: Dwarf_Cie,
                                    arg3: *mut Dwarf_Off,
                                    arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn _dwarf_cie_section_offset(arg1: Dwarf_Debug, arg2: Dwarf_Cie,
                                     arg3: *mut Dwarf_Off,
                                     arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_macro(arg1: Dwarf_Debug,
                           arg2: *mut ::std::os::raw::c_char,
                           arg3: Dwarf_Addr,
                           arg4: *mut *mut ::std::os::raw::c_char,
                           arg5: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_get_all_defined_macros(arg1: Dwarf_Debug, arg2: Dwarf_Addr,
                                        arg3: *mut Dwarf_Signed,
                                        arg4:
                                            *mut *mut *mut ::std::os::raw::c_char,
                                        arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_find_macro_value_start(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn dwarf_get_macro_details(arg1: Dwarf_Debug, arg2: Dwarf_Off,
                                   arg3: Dwarf_Unsigned,
                                   arg4: *mut Dwarf_Signed,
                                   arg5: *mut *mut Dwarf_Macro_Details,
                                   arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_address_size(arg1: Dwarf_Debug, arg2: *mut Dwarf_Half,
                                  arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_die_address_size(arg1: Dwarf_Die, arg2: *mut Dwarf_Half,
                                      arg3: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_form_class(arg1: Dwarf_Half, arg2: Dwarf_Half,
                                arg3: Dwarf_Half, arg4: Dwarf_Half)
     -> Enum_Dwarf_Form_Class;
    pub fn dwarf_errno(arg1: Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_errmsg(arg1: Dwarf_Error) -> *mut ::std::os::raw::c_char;
    pub fn dwarf_set_stringcheck(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_set_reloc_application(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_seterrhand(arg1: Dwarf_Debug, arg2: Dwarf_Handler)
     -> Dwarf_Handler;
    pub fn dwarf_seterrarg(arg1: Dwarf_Debug, arg2: Dwarf_Ptr) -> Dwarf_Ptr;
    pub fn dwarf_dealloc(arg1: Dwarf_Debug, arg2: *mut ::std::os::raw::c_void,
                         arg3: Dwarf_Unsigned);
    pub fn dwarf_producer_init_c(arg1: Dwarf_Unsigned,
                                 arg2: Dwarf_Callback_Func_c,
                                 arg3: Dwarf_Handler, arg4: Dwarf_Ptr,
                                 arg5: *mut ::std::os::raw::c_void,
                                 arg6: *mut Dwarf_Error) -> Dwarf_P_Debug;
    pub fn dwarf_producer_init_b(arg1: Dwarf_Unsigned,
                                 arg2: Dwarf_Callback_Func_b,
                                 arg3: Dwarf_Handler, arg4: Dwarf_Ptr,
                                 arg5: *mut Dwarf_Error) -> Dwarf_P_Debug;
    pub fn dwarf_producer_init(arg1: Dwarf_Unsigned,
                               arg2: Dwarf_Callback_Func, arg3: Dwarf_Handler,
                               arg4: Dwarf_Ptr, arg5: *mut Dwarf_Error)
     -> Dwarf_P_Debug;
    pub fn dwarf_transform_to_disk_form(arg1: Dwarf_P_Debug,
                                        arg2: *mut Dwarf_Error)
     -> Dwarf_Signed;
    pub fn dwarf_get_section_bytes(arg1: Dwarf_P_Debug, arg2: Dwarf_Signed,
                                   arg3: *mut Dwarf_Signed,
                                   arg4: *mut Dwarf_Unsigned,
                                   arg5: *mut Dwarf_Error) -> Dwarf_Ptr;
    pub fn dwarf_get_relocation_info_count(arg1: Dwarf_P_Debug,
                                           arg2: *mut Dwarf_Unsigned,
                                           arg3: *mut ::std::os::raw::c_int,
                                           arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_relocation_info(arg1: Dwarf_P_Debug,
                                     arg2: *mut Dwarf_Signed,
                                     arg3: *mut Dwarf_Signed,
                                     arg4: *mut Dwarf_Unsigned,
                                     arg5: *mut Dwarf_Relocation_Data,
                                     arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_die_markers(arg1: Dwarf_P_Debug,
                                 arg2: *mut Dwarf_P_Marker,
                                 arg3: *mut Dwarf_Unsigned,
                                 arg4: *mut Dwarf_Error) -> Dwarf_Signed;
    pub fn dwarf_get_string_attributes_count(arg1: Dwarf_P_Debug,
                                             arg2: *mut Dwarf_Unsigned,
                                             arg3: *mut ::std::os::raw::c_int,
                                             arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_string_attributes_info(arg1: Dwarf_P_Debug,
                                            arg2: *mut Dwarf_Signed,
                                            arg3: *mut Dwarf_Unsigned,
                                            arg4: *mut Dwarf_P_String_Attr,
                                            arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_reset_section_bytes(arg1: Dwarf_P_Debug);
    pub fn dwarf_producer_finish(arg1: Dwarf_P_Debug, arg2: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_add_AT_targ_address(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                     arg3: Dwarf_Half, arg4: Dwarf_Unsigned,
                                     arg5: Dwarf_Signed,
                                     arg6: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_block(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                              arg3: Dwarf_Half, arg4: *mut Dwarf_Small,
                              arg5: Dwarf_Unsigned, arg6: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_targ_address_b(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                       arg3: Dwarf_Half, arg4: Dwarf_Unsigned,
                                       arg5: Dwarf_Unsigned,
                                       arg6: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_ref_address(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                    arg3: Dwarf_Half, arg4: Dwarf_Unsigned,
                                    arg5: Dwarf_Unsigned,
                                    arg6: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_unsigned_const(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                       arg3: Dwarf_Half, arg4: Dwarf_Unsigned,
                                       arg5: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_signed_const(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                     arg3: Dwarf_Half, arg4: Dwarf_Signed,
                                     arg5: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_reference(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                  arg3: Dwarf_Half, arg4: Dwarf_P_Die,
                                  arg5: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_dataref(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                arg3: Dwarf_Half, arg4: Dwarf_Unsigned,
                                arg5: Dwarf_Unsigned, arg6: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_const_value_string(arg1: Dwarf_P_Die,
                                           arg2: *mut ::std::os::raw::c_char,
                                           arg3: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_location_expr(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                      arg3: Dwarf_Half, arg4: Dwarf_P_Expr,
                                      arg5: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_string(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                               arg3: Dwarf_Half,
                               arg4: *mut ::std::os::raw::c_char,
                               arg5: *mut Dwarf_Error) -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_flag(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                             arg3: Dwarf_Half, arg4: Dwarf_Small,
                             arg5: *mut Dwarf_Error) -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_producer(arg1: Dwarf_P_Die,
                                 arg2: *mut ::std::os::raw::c_char,
                                 arg3: *mut Dwarf_Error) -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_const_value_signedint(arg1: Dwarf_P_Die,
                                              arg2: Dwarf_Signed,
                                              arg3: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_const_value_unsignedint(arg1: Dwarf_P_Die,
                                                arg2: Dwarf_Unsigned,
                                                arg3: *mut Dwarf_Error)
     -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_comp_dir(arg1: Dwarf_P_Die,
                                 arg2: *mut ::std::os::raw::c_char,
                                 arg3: *mut Dwarf_Error) -> Dwarf_P_Attribute;
    pub fn dwarf_add_AT_name(arg1: Dwarf_P_Die,
                             arg2: *mut ::std::os::raw::c_char,
                             arg3: *mut Dwarf_Error) -> Dwarf_P_Attribute;
    pub fn dwarf_add_directory_decl(arg1: Dwarf_P_Debug,
                                    arg2: *mut ::std::os::raw::c_char,
                                    arg3: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_file_decl(arg1: Dwarf_P_Debug,
                               arg2: *mut ::std::os::raw::c_char,
                               arg3: Dwarf_Unsigned, arg4: Dwarf_Unsigned,
                               arg5: Dwarf_Unsigned, arg6: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_add_line_entry_b(arg1: Dwarf_P_Debug, arg2: Dwarf_Unsigned,
                                  arg3: Dwarf_Addr, arg4: Dwarf_Unsigned,
                                  arg5: Dwarf_Signed, arg6: Dwarf_Bool,
                                  arg7: Dwarf_Bool, arg8: Dwarf_Bool,
                                  arg9: Dwarf_Bool, arg10: Dwarf_Unsigned,
                                  arg11: Dwarf_Unsigned,
                                  arg12: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_line_entry(arg1: Dwarf_P_Debug, arg2: Dwarf_Unsigned,
                                arg3: Dwarf_Addr, arg4: Dwarf_Unsigned,
                                arg5: Dwarf_Signed, arg6: Dwarf_Bool,
                                arg7: Dwarf_Bool, arg8: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_lne_set_address(arg1: Dwarf_P_Debug, arg2: Dwarf_Unsigned,
                                 arg3: Dwarf_Unsigned, arg4: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_lne_end_sequence(arg1: Dwarf_P_Debug, arg2: Dwarf_Addr,
                                  arg3: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_frame_cie(arg1: Dwarf_P_Debug,
                               arg2: *mut ::std::os::raw::c_char,
                               arg3: Dwarf_Small, arg4: Dwarf_Small,
                               arg5: Dwarf_Small, arg6: Dwarf_Ptr,
                               arg7: Dwarf_Unsigned, arg8: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_add_frame_fde(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Fde,
                               arg3: Dwarf_P_Die, arg4: Dwarf_Unsigned,
                               arg5: Dwarf_Unsigned, arg6: Dwarf_Unsigned,
                               arg7: Dwarf_Unsigned, arg8: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_add_frame_fde_b(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Fde,
                                 arg3: Dwarf_P_Die, arg4: Dwarf_Unsigned,
                                 arg5: Dwarf_Addr, arg6: Dwarf_Unsigned,
                                 arg7: Dwarf_Unsigned, arg8: Dwarf_Unsigned,
                                 arg9: Dwarf_Addr, arg10: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_add_frame_info_b(dbg: Dwarf_P_Debug, arg1: Dwarf_P_Fde,
                                  arg2: Dwarf_P_Die, arg3: Dwarf_Unsigned,
                                  arg4: Dwarf_Addr, arg5: Dwarf_Unsigned,
                                  arg6: Dwarf_Unsigned, arg7: Dwarf_Unsigned,
                                  arg8: Dwarf_Addr, arg9: Dwarf_Signed,
                                  arg10: Dwarf_Unsigned,
                                  arg11: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_frame_info(dbg: Dwarf_P_Debug, arg1: Dwarf_P_Fde,
                                arg2: Dwarf_P_Die, arg3: Dwarf_Unsigned,
                                arg4: Dwarf_Addr, arg5: Dwarf_Unsigned,
                                arg6: Dwarf_Unsigned, arg7: Dwarf_Signed,
                                arg8: Dwarf_Unsigned, arg9: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_add_fde_inst(arg1: Dwarf_P_Fde, arg2: Dwarf_Small,
                              arg3: Dwarf_Unsigned, arg4: Dwarf_Unsigned,
                              arg5: *mut Dwarf_Error) -> Dwarf_P_Fde;
    pub fn dwarf_insert_fde_inst_bytes(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Fde,
                                       arg3: Dwarf_Unsigned, arg4: Dwarf_Ptr,
                                       arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_new_fde(arg1: Dwarf_P_Debug, arg2: *mut Dwarf_Error)
     -> Dwarf_P_Fde;
    pub fn dwarf_fde_cfa_offset(arg1: Dwarf_P_Fde, arg2: Dwarf_Unsigned,
                                arg3: Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> Dwarf_P_Fde;
    pub fn dwarf_new_die(arg1: Dwarf_P_Debug, arg2: Dwarf_Tag,
                         arg3: Dwarf_P_Die, arg4: Dwarf_P_Die,
                         arg5: Dwarf_P_Die, arg6: Dwarf_P_Die,
                         arg7: *mut Dwarf_Error) -> Dwarf_P_Die;
    pub fn dwarf_add_die_to_debug(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                  arg3: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_die_marker(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                arg3: Dwarf_Unsigned, arg4: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_get_die_marker(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                                arg3: *mut Dwarf_Unsigned,
                                arg4: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_die_link(arg1: Dwarf_P_Die, arg2: Dwarf_P_Die,
                          arg3: Dwarf_P_Die, arg4: Dwarf_P_Die,
                          arg5: Dwarf_P_Die, arg6: *mut Dwarf_Error)
     -> Dwarf_P_Die;
    pub fn dwarf_dealloc_compressed_block(arg1: Dwarf_P_Debug,
                                          arg2: *mut ::std::os::raw::c_void);
    pub fn dwarf_dealloc_uncompressed_block(arg1: Dwarf_Debug,
                                            arg2:
                                                *mut ::std::os::raw::c_void);
    pub fn dwarf_compress_integer_block(arg1: Dwarf_P_Debug, arg2: Dwarf_Bool,
                                        arg3: Dwarf_Small,
                                        arg4: *mut ::std::os::raw::c_void,
                                        arg5: Dwarf_Unsigned,
                                        arg6: *mut Dwarf_Unsigned,
                                        arg7: *mut Dwarf_Error)
     -> *mut ::std::os::raw::c_void;
    pub fn dwarf_uncompress_integer_block(arg1: Dwarf_Debug, arg2: Dwarf_Bool,
                                          arg3: Dwarf_Small,
                                          arg4: *mut ::std::os::raw::c_void,
                                          arg5: Dwarf_Unsigned,
                                          arg6: *mut Dwarf_Unsigned,
                                          arg7: *mut Dwarf_Error)
     -> *mut ::std::os::raw::c_void;
    pub fn dwarf_new_expr(arg1: Dwarf_P_Debug, arg2: *mut Dwarf_Error)
     -> Dwarf_P_Expr;
    pub fn dwarf_expr_reset(arg1: Dwarf_P_Expr, arg2: *mut Dwarf_Error);
    pub fn dwarf_add_expr_gen(arg1: Dwarf_P_Expr, arg2: Dwarf_Small,
                              arg3: Dwarf_Unsigned, arg4: Dwarf_Unsigned,
                              arg5: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_expr_addr(arg1: Dwarf_P_Expr, arg2: Dwarf_Unsigned,
                               arg3: Dwarf_Signed, arg4: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_add_expr_addr_b(arg1: Dwarf_P_Expr, arg2: Dwarf_Unsigned,
                                 arg3: Dwarf_Unsigned, arg4: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_expr_current_offset(arg1: Dwarf_P_Expr,
                                     arg2: *mut Dwarf_Error)
     -> Dwarf_Unsigned;
    pub fn dwarf_expr_into_block(arg1: Dwarf_P_Expr,
                                 arg2: *mut Dwarf_Unsigned,
                                 arg3: *mut Dwarf_Error) -> Dwarf_Addr;
    pub fn dwarf_add_arange(arg1: Dwarf_P_Debug, arg2: Dwarf_Addr,
                            arg3: Dwarf_Unsigned, arg4: Dwarf_Signed,
                            arg5: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_arange_b(arg1: Dwarf_P_Debug, arg2: Dwarf_Addr,
                              arg3: Dwarf_Unsigned, arg4: Dwarf_Unsigned,
                              arg5: Dwarf_Unsigned, arg6: Dwarf_Addr,
                              arg7: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_pubname(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                             arg3: *mut ::std::os::raw::c_char,
                             arg4: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_funcname(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                              arg3: *mut ::std::os::raw::c_char,
                              arg4: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_typename(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                              arg3: *mut ::std::os::raw::c_char,
                              arg4: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_varname(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                             arg3: *mut ::std::os::raw::c_char,
                             arg4: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_add_weakname(arg1: Dwarf_P_Debug, arg2: Dwarf_P_Die,
                              arg3: *mut ::std::os::raw::c_char,
                              arg4: *mut Dwarf_Error) -> Dwarf_Unsigned;
    pub fn dwarf_def_macro(arg1: Dwarf_P_Debug, arg2: Dwarf_Unsigned,
                           arg3: *mut ::std::os::raw::c_char,
                           arg4: *mut ::std::os::raw::c_char,
                           arg5: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_undef_macro(arg1: Dwarf_P_Debug, arg2: Dwarf_Unsigned,
                             arg3: *mut ::std::os::raw::c_char,
                             arg4: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_start_macro_file(arg1: Dwarf_P_Debug, arg2: Dwarf_Unsigned,
                                  arg3: Dwarf_Unsigned,
                                  arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_end_macro_file(arg1: Dwarf_P_Debug, arg2: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_vendor_ext(arg1: Dwarf_P_Debug, arg2: Dwarf_Unsigned,
                            arg3: *mut ::std::os::raw::c_char,
                            arg4: *mut Dwarf_Error) -> ::std::os::raw::c_int;
    pub fn dwarf_attr_offset(arg1: Dwarf_Die, arg2: Dwarf_Attribute,
                             arg3: *mut Dwarf_Off, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_section_max_offsets(arg1: Dwarf_Debug,
                                         arg2: *mut Dwarf_Unsigned,
                                         arg3: *mut Dwarf_Unsigned,
                                         arg4: *mut Dwarf_Unsigned,
                                         arg5: *mut Dwarf_Unsigned,
                                         arg6: *mut Dwarf_Unsigned,
                                         arg7: *mut Dwarf_Unsigned,
                                         arg8: *mut Dwarf_Unsigned,
                                         arg9: *mut Dwarf_Unsigned,
                                         arg10: *mut Dwarf_Unsigned,
                                         arg11: *mut Dwarf_Unsigned,
                                         arg12: *mut Dwarf_Unsigned)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_section_max_offsets_b(arg1: Dwarf_Debug,
                                           arg2: *mut Dwarf_Unsigned,
                                           arg3: *mut Dwarf_Unsigned,
                                           arg4: *mut Dwarf_Unsigned,
                                           arg5: *mut Dwarf_Unsigned,
                                           arg6: *mut Dwarf_Unsigned,
                                           arg7: *mut Dwarf_Unsigned,
                                           arg8: *mut Dwarf_Unsigned,
                                           arg9: *mut Dwarf_Unsigned,
                                           arg10: *mut Dwarf_Unsigned,
                                           arg11: *mut Dwarf_Unsigned,
                                           arg12: *mut Dwarf_Unsigned,
                                           arg13: *mut Dwarf_Unsigned)
     -> ::std::os::raw::c_int;
    pub fn dwarf_set_frame_rule_inital_value(arg1: Dwarf_Debug,
                                             arg2: Dwarf_Half) -> Dwarf_Half;
    pub fn dwarf_set_frame_rule_initial_value(arg1: Dwarf_Debug,
                                              arg2: Dwarf_Half) -> Dwarf_Half;
    pub fn dwarf_set_frame_rule_table_size(arg1: Dwarf_Debug,
                                           arg2: Dwarf_Half) -> Dwarf_Half;
    pub fn dwarf_set_frame_cfa_value(arg1: Dwarf_Debug, arg2: Dwarf_Half)
     -> Dwarf_Half;
    pub fn dwarf_set_frame_same_value(arg1: Dwarf_Debug, arg2: Dwarf_Half)
     -> Dwarf_Half;
    pub fn dwarf_set_frame_undefined_value(arg1: Dwarf_Debug,
                                           arg2: Dwarf_Half) -> Dwarf_Half;
    pub fn dwarf_set_default_address_size(arg1: Dwarf_Debug,
                                          arg2: Dwarf_Small) -> Dwarf_Small;
    pub fn dwarf_get_ranges(arg1: Dwarf_Debug, arg2: Dwarf_Off,
                            arg3: *mut *mut Dwarf_Ranges,
                            arg4: *mut Dwarf_Signed,
                            arg5: *mut Dwarf_Unsigned, arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ranges_a(arg1: Dwarf_Debug, arg2: Dwarf_Off,
                              arg3: Dwarf_Die, arg4: *mut *mut Dwarf_Ranges,
                              arg5: *mut Dwarf_Signed,
                              arg6: *mut Dwarf_Unsigned,
                              arg7: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_ranges_dealloc(arg1: Dwarf_Debug, arg2: *mut Dwarf_Ranges,
                                arg3: Dwarf_Signed);
    pub fn dwarf_get_harmless_error_list(arg1: Dwarf_Debug,
                                         arg2: ::std::os::raw::c_uint,
                                         arg3:
                                             *mut *const ::std::os::raw::c_char,
                                         arg4: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_insert_harmless_error(arg1: Dwarf_Debug,
                                       arg2: *mut ::std::os::raw::c_char);
    pub fn dwarf_set_harmless_error_list_size(arg1: Dwarf_Debug,
                                              arg2: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn dwarf_get_TAG_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_children_name(arg1: ::std::os::raw::c_uint,
                                   arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_FORM_name(arg1: ::std::os::raw::c_uint,
                               arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_AT_name(arg1: ::std::os::raw::c_uint,
                             arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_OP_name(arg1: ::std::os::raw::c_uint,
                             arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ATE_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_DS_name(arg1: ::std::os::raw::c_uint,
                             arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_END_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ATCF_name(arg1: ::std::os::raw::c_uint,
                               arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ACCESS_name(arg1: ::std::os::raw::c_uint,
                                 arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_VIS_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_VIRTUALITY_name(arg1: ::std::os::raw::c_uint,
                                     arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_LANG_name(arg1: ::std::os::raw::c_uint,
                               arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ID_name(arg1: ::std::os::raw::c_uint,
                             arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_CC_name(arg1: ::std::os::raw::c_uint,
                             arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_INL_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ORD_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_DSC_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_LNS_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_LNE_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ISA_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_MACINFO_name(arg1: ::std::os::raw::c_uint,
                                  arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_CFA_name(arg1: ::std::os::raw::c_uint,
                              arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_EH_name(arg1: ::std::os::raw::c_uint,
                             arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_FRAME_name(arg1: ::std::os::raw::c_uint,
                                arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_CHILDREN_name(arg1: ::std::os::raw::c_uint,
                                   arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_ADDR_name(arg1: ::std::os::raw::c_uint,
                               arg2: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_convert_to_global_offset(arg1: Dwarf_Attribute,
                                          arg2: Dwarf_Off,
                                          arg3: *mut Dwarf_Off,
                                          arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_die_offsets(arg1: Dwarf_Die, arg2: *mut Dwarf_Off,
                             arg3: *mut Dwarf_Off, arg4: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_section_info_by_name(arg1: Dwarf_Debug,
                                          arg2: *const ::std::os::raw::c_char,
                                          arg3: *mut Dwarf_Addr,
                                          arg4: *mut Dwarf_Unsigned,
                                          arg5: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_section_info_by_index(arg1: Dwarf_Debug,
                                           arg2: ::std::os::raw::c_int,
                                           arg3:
                                               *mut *const ::std::os::raw::c_char,
                                           arg4: *mut Dwarf_Addr,
                                           arg5: *mut Dwarf_Unsigned,
                                           arg6: *mut Dwarf_Error)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_section_count(arg1: Dwarf_Debug)
     -> ::std::os::raw::c_int;
    pub fn dwarf_get_version_of_die(arg1: Dwarf_Die, arg2: *mut Dwarf_Half,
                                    arg3: *mut Dwarf_Half)
     -> ::std::os::raw::c_int;
    pub fn dwarf_record_cmdline_options(arg1: Dwarf_Cmdline_Options);
}

pub const DW_DLV_NO_ENTRY : c_int  = -1;
pub const DW_DLV_OK       : c_int  = 0;
pub const DW_DLV_ERROR    : c_int  = 1;

pub const DW_DLA_STRING      : Dwarf_Unsigned  = 0x01;     /* char* */
pub const DW_DLA_LOC         : Dwarf_Unsigned  = 0x02;     /* Dwarf_Loc */
pub const DW_DLA_LOCDESC     : Dwarf_Unsigned  = 0x03;     /* Dwarf_Locdesc */
pub const DW_DLA_ELLIST      : Dwarf_Unsigned  = 0x04;     /* Dwarf_Ellist (not used)*/
pub const DW_DLA_BOUNDS      : Dwarf_Unsigned  = 0x05;     /* Dwarf_Bounds (not used) */
pub const DW_DLA_BLOCK       : Dwarf_Unsigned  = 0x06;     /* Dwarf_Block */
pub const DW_DLA_DEBUG       : Dwarf_Unsigned  = 0x07;     /* Dwarf_Debug */
pub const DW_DLA_DIE         : Dwarf_Unsigned  = 0x08;     /* Dwarf_Die */
pub const DW_DLA_LINE        : Dwarf_Unsigned  = 0x09;     /* Dwarf_Line */
pub const DW_DLA_ATTR        : Dwarf_Unsigned  = 0x0a;     /* Dwarf_Attribute */
pub const DW_DLA_TYPE        : Dwarf_Unsigned  = 0x0b;     /* Dwarf_Type  (not used) */
pub const DW_DLA_SUBSCR      : Dwarf_Unsigned  = 0x0c;     /* Dwarf_Subscr (not used) */
pub const DW_DLA_GLOBAL      : Dwarf_Unsigned  = 0x0d;     /* Dwarf_Global */
pub const DW_DLA_ERROR       : Dwarf_Unsigned  = 0x0e;     /* Dwarf_Error */
pub const DW_DLA_LIST        : Dwarf_Unsigned  = 0x0f;     /* a list */
pub const DW_DLA_LINEBUF     : Dwarf_Unsigned  = 0x10;     /* Dwarf_Line* (not used) */
pub const DW_DLA_ARANGE      : Dwarf_Unsigned  = 0x11;     /* Dwarf_Arange */
pub const DW_DLA_ABBREV      : Dwarf_Unsigned  = 0x12;      /* Dwarf_Abbrev */
pub const DW_DLA_FRAME_OP    : Dwarf_Unsigned  = 0x13;      /* Dwarf_Frame_Op */
pub const DW_DLA_CIE         : Dwarf_Unsigned  = 0x14;     /* Dwarf_Cie */
pub const DW_DLA_FDE         : Dwarf_Unsigned  = 0x15;     /* Dwarf_Fde */
pub const DW_DLA_LOC_BLOCK   : Dwarf_Unsigned  = 0x16;     /* Dwarf_Loc Block (not used) */
pub const DW_DLA_FRAME_BLOCK : Dwarf_Unsigned  = 0x17;     /* Dwarf_Frame Block (not used) */
pub const DW_DLA_FUNC        : Dwarf_Unsigned  = 0x18;     /* Dwarf_Func */
pub const DW_DLA_TYPENAME    : Dwarf_Unsigned  = 0x19;     /* Dwarf_Type */
pub const DW_DLA_VAR         : Dwarf_Unsigned  = 0x1a;     /* Dwarf_Var */
pub const DW_DLA_WEAK        : Dwarf_Unsigned  = 0x1b;     /* Dwarf_Weak */
pub const DW_DLA_ADDR        : Dwarf_Unsigned  = 0x1c;     /* Dwarf_Addr sized entries */
pub const DW_DLA_RANGES      : Dwarf_Unsigned  = 0x1d;     /* Dwarf_Ranges */
/***********************************
               constants 
***********************************/
// copied from the #defines in libdwarf.h

/*
pub const DW_PR_XZEROS            = "08" 
pub const DW_PR_DUx               = "lx"
pub const DW_PR_DSx               = "lx"
pub const DW_PR_DUu               = "lu"
pub const DW_PR_DSd               = "ld"
pub const DW_PR_DUx               = "llx"
pub const DW_PR_DSx               = "llx"
pub const DW_PR_DUu               = "llu"
pub const DW_PR_DSd               = "lld"
pub const DW_PR_DUx               = "I64x"
pub const DW_PR_DSx               = "I64x"
pub const DW_PR_DUu               = "I64u"
pub const DW_PR_DSd               = "I64d"
pub const DW_REG_TABLE_SIZE   = 66
pub const DW_FRAME_SAME_VAL                = 1035
pub const DW_FRAME_REG_INITIAL_VALUE  = DW_FRAME_SAME_VAL
pub const DW_FRAME_UNDEFINED_VAL           = 1034
pub const DW_FRAME_CFA_COL3                = 1436
pub const DW_EXPR_OFFSET  = 0  /* DWARF2 only sees this. */
pub const DW_EXPR_VAL_OFFSET  = 1
pub const DW_EXPR_EXPRESSION  = 2
pub const DW_EXPR_VAL_EXPRESSION  = 3

pub const DW_CIE_AUGMENTER_STRING_V0               = "z"
pub const DW_DLC_READ         = 0        /* read only access */
pub const DW_DLC_WRITE        = 1        /* write only access */
pub const DW_DLC_RDWR         = 2        /* read/write access NOT SUPPORTED*/
pub const DW_DLC_SIZE_64      = 0x40000000 /* 64-bit address-size target */
pub const DW_DLC_SIZE_32      = 0x20000000 /* 32-bit address-size target */
pub const DW_DLC_OFFSET_SIZE_64  = 0x10000000 /* 64-bit offset-size DWARF */
pub const DW_DLC_ISA_MIPS              = 0x00000000 /* MIPS target */
pub const DW_DLC_ISA_IA64              = 0x01000000 /* IA64 target */
pub const DW_DLC_STREAM_RELOCATIONS    = 0x02000000 /* Old style binary relocs */
pub const DW_DLC_SYMBOLIC_RELOCATIONS  = 0x04000000 
pub const DW_DLC_TARGET_BIGENDIAN      = 0x08000000 /* Big    endian target */
pub const DW_DLC_TARGET_LITTLEENDIAN   = 0x00100000 /* Little endian target */
pub const DW_DLC_SUN_OFFSET32         = 0x00010000 /* use 32-bit sec offsets */
pub const DW_DLC_SUN_OFFSET64         = 0x00020000 /* use 64-bit sec offsets */
pub const DW_DLC_SUN_POINTER32         = 0x00040000 /* use 4 for address_size */
pub const DW_DLC_SUN_POINTER64         = 0x00080000 /* use 8 for address_size */
pub const DW_DLS_BACKWARD    = -1       /* slide backward to find line */
pub const DW_DLS_NOSLIDE      = 0       /* match exactly without sliding */ 
pub const DW_DLS_FORWARD      = 1       /* slide forward to find line */
pub const DW_DLE_NE           = 0     /* no error */ 
pub const DW_DLE_VMM          = 1     /* dwarf format/library version mismatch */
pub const DW_DLE_MAP          = 2     /* memory map failure */
pub const DW_DLE_LEE          = 3     /* libelf error */
pub const DW_DLE_NDS          = 4     /* no debug section */
pub const DW_DLE_NLS          = 5     /* no line section */
pub const DW_DLE_ID           = 6     /* invalid descriptor for query */
pub const DW_DLE_IOF          = 7     /* I/O failure */
pub const DW_DLE_MAF          = 8     /* memory allocation failure */
pub const DW_DLE_IA           = 9     /* invalid argument */ 
pub const DW_DLE_MDE          = 10     /* mangled debugging entry */
pub const DW_DLE_MLE          = 11     /* mangled line number entry */
pub const DW_DLE_FNO          = 12     /* file not open */
pub const DW_DLE_FNR          = 13     /* file not a regular file */
pub const DW_DLE_FWA          = 14     /* file open with wrong access */
pub const DW_DLE_NOB          = 15     /* not an object file */
pub const DW_DLE_MOF          = 16     /* mangled object file header */
pub const DW_DLE_EOLL         = 17     /* end of location list entries */
pub const DW_DLE_NOLL         = 18     /* no location list section */
pub const DW_DLE_BADOFF       = 19     /* Invalid offset */
pub const DW_DLE_EOS          = 20     /* end of section  */
pub const DW_DLE_ATRUNC       = 21     /* abbreviations section appears truncated*/
pub const DW_DLE_BADBITC      = 22     /* Address size passed to dwarf bad*/
pub const DW_DLE_DBG_ALLOC                         = 23
pub const DW_DLE_FSTAT_ERROR                       = 24
pub const DW_DLE_FSTAT_MODE_ERROR                  = 25
pub const DW_DLE_INIT_ACCESS_WRONG                 = 26
pub const DW_DLE_ELF_BEGIN_ERROR                   = 27
pub const DW_DLE_ELF_GETEHDR_ERROR                 = 28
pub const DW_DLE_ELF_GETSHDR_ERROR                 = 29
pub const DW_DLE_ELF_STRPTR_ERROR                  = 30
pub const DW_DLE_DEBUG_INFO_DUPLICATE              = 31
pub const DW_DLE_DEBUG_INFO_NULL                   = 32
pub const DW_DLE_DEBUG_ABBREV_DUPLICATE            = 33
pub const DW_DLE_DEBUG_ABBREV_NULL                 = 34
pub const DW_DLE_DEBUG_ARANGES_DUPLICATE           = 35
pub const DW_DLE_DEBUG_ARANGES_NULL                = 36
pub const DW_DLE_DEBUG_LINE_DUPLICATE              = 37
pub const DW_DLE_DEBUG_LINE_NULL                   = 38
pub const DW_DLE_DEBUG_LOC_DUPLICATE               = 39
pub const DW_DLE_DEBUG_LOC_NULL                    = 40
pub const DW_DLE_DEBUG_MACINFO_DUPLICATE           = 41
pub const DW_DLE_DEBUG_MACINFO_NULL                = 42
pub const DW_DLE_DEBUG_PUBNAMES_DUPLICATE          = 43
pub const DW_DLE_DEBUG_PUBNAMES_NULL               = 44
pub const DW_DLE_DEBUG_STR_DUPLICATE               = 45
pub const DW_DLE_DEBUG_STR_NULL                    = 46
pub const DW_DLE_CU_LENGTH_ERROR                   = 47
pub const DW_DLE_VERSION_STAMP_ERROR               = 48
pub const DW_DLE_ABBREV_OFFSET_ERROR               = 49
pub const DW_DLE_ADDRESS_SIZE_ERROR                = 50
pub const DW_DLE_DEBUG_INFO_PTR_NULL               = 51
pub const DW_DLE_DIE_NULL                          = 52
pub const DW_DLE_STRING_OFFSET_BAD                 = 53
pub const DW_DLE_DEBUG_LINE_LENGTH_BAD             = 54
pub const DW_DLE_LINE_PROLOG_LENGTH_BAD            = 55
pub const DW_DLE_LINE_NUM_OPERANDS_BAD             = 56
pub const DW_DLE_LINE_SET_ADDR_ERROR               = 57 /* No longer used. */
pub const DW_DLE_LINE_EXT_OPCODE_BAD               = 58
pub const DW_DLE_DWARF_LINE_NULL                   = 59
pub const DW_DLE_INCL_DIR_NUM_BAD                  = 60
pub const DW_DLE_LINE_FILE_NUM_BAD                 = 61
pub const DW_DLE_ALLOC_FAIL                        = 62
pub const DW_DLE_NO_CALLBACK_FUNC                  = 63
pub const DW_DLE_SECT_ALLOC                        = 64
pub const DW_DLE_FILE_ENTRY_ALLOC                  = 65
pub const DW_DLE_LINE_ALLOC                        = 66
pub const DW_DLE_FPGM_ALLOC                        = 67
pub const DW_DLE_INCDIR_ALLOC                      = 68
pub const DW_DLE_STRING_ALLOC                      = 69
pub const DW_DLE_CHUNK_ALLOC                       = 70
pub const DW_DLE_BYTEOFF_ERR                       = 71
pub const DW_DLE_CIE_ALLOC                         = 72
pub const DW_DLE_FDE_ALLOC                         = 73
pub const DW_DLE_REGNO_OVFL                        = 74
pub const DW_DLE_CIE_OFFS_ALLOC                    = 75
pub const DW_DLE_WRONG_ADDRESS                     = 76
pub const DW_DLE_EXTRA_NEIGHBORS                   = 77
pub const DW_DLE_WRONG_TAG                         = 78
pub const DW_DLE_DIE_ALLOC                         = 79
pub const DW_DLE_PARENT_EXISTS                     = 80
pub const DW_DLE_DBG_NULL                          = 81
pub const DW_DLE_DEBUGLINE_ERROR                   = 82
pub const DW_DLE_DEBUGFRAME_ERROR                  = 83
pub const DW_DLE_DEBUGINFO_ERROR                   = 84
pub const DW_DLE_ATTR_ALLOC                        = 85
pub const DW_DLE_ABBREV_ALLOC                      = 86
pub const DW_DLE_OFFSET_UFLW                       = 87
pub const DW_DLE_ELF_SECT_ERR                      = 88
pub const DW_DLE_DEBUG_FRAME_LENGTH_BAD            = 89
pub const DW_DLE_FRAME_VERSION_BAD                 = 90
pub const DW_DLE_CIE_RET_ADDR_REG_ERROR            = 91
pub const DW_DLE_FDE_NULL                          = 92
pub const DW_DLE_FDE_DBG_NULL                      = 93
pub const DW_DLE_CIE_NULL                          = 94
pub const DW_DLE_CIE_DBG_NULL                      = 95
pub const DW_DLE_FRAME_TABLE_COL_BAD               = 96
pub const DW_DLE_PC_NOT_IN_FDE_RANGE               = 97
pub const DW_DLE_CIE_INSTR_EXEC_ERROR              = 98
pub const DW_DLE_FRAME_INSTR_EXEC_ERROR            = 99
pub const DW_DLE_FDE_PTR_NULL                     = 100
pub const DW_DLE_RET_OP_LIST_NULL                 = 101
pub const DW_DLE_LINE_CONTEXT_NULL                = 102
pub const DW_DLE_DBG_NO_CU_CONTEXT                = 103
pub const DW_DLE_DIE_NO_CU_CONTEXT                = 104
pub const DW_DLE_FIRST_DIE_NOT_CU                 = 105
pub const DW_DLE_NEXT_DIE_PTR_NULL                = 106
pub const DW_DLE_DEBUG_FRAME_DUPLICATE            = 107
pub const DW_DLE_DEBUG_FRAME_NULL                 = 108
pub const DW_DLE_ABBREV_DECODE_ERROR              = 109
pub const DW_DLE_DWARF_ABBREV_NULL                = 110
pub const DW_DLE_ATTR_NULL                        = 111
pub const DW_DLE_DIE_BAD                          = 112
pub const DW_DLE_DIE_ABBREV_BAD                   = 113
pub const DW_DLE_ATTR_FORM_BAD                    = 114
pub const DW_DLE_ATTR_NO_CU_CONTEXT               = 115
pub const DW_DLE_ATTR_FORM_SIZE_BAD               = 116
pub const DW_DLE_ATTR_DBG_NULL                    = 117
pub const DW_DLE_BAD_REF_FORM                     = 118
pub const DW_DLE_ATTR_FORM_OFFSET_BAD             = 119
pub const DW_DLE_LINE_OFFSET_BAD                  = 120
pub const DW_DLE_DEBUG_STR_OFFSET_BAD             = 121
pub const DW_DLE_STRING_PTR_NULL                  = 122
pub const DW_DLE_PUBNAMES_VERSION_ERROR           = 123
pub const DW_DLE_PUBNAMES_LENGTH_BAD              = 124
pub const DW_DLE_GLOBAL_NULL                      = 125
pub const DW_DLE_GLOBAL_CONTEXT_NULL              = 126
pub const DW_DLE_DIR_INDEX_BAD                    = 127
pub const DW_DLE_LOC_EXPR_BAD                     = 128
pub const DW_DLE_DIE_LOC_EXPR_BAD                 = 129
pub const DW_DLE_ADDR_ALLOC                       = 130
pub const DW_DLE_OFFSET_BAD                       = 131
pub const DW_DLE_MAKE_CU_CONTEXT_FAIL             = 132
pub const DW_DLE_REL_ALLOC                        = 133
pub const DW_DLE_ARANGE_OFFSET_BAD                = 134
pub const DW_DLE_SEGMENT_SIZE_BAD                 = 135
pub const DW_DLE_ARANGE_LENGTH_BAD                = 136
pub const DW_DLE_ARANGE_DECODE_ERROR              = 137
pub const DW_DLE_ARANGES_NULL                     = 138
pub const DW_DLE_ARANGE_NULL                      = 139
pub const DW_DLE_NO_FILE_NAME                     = 140
pub const DW_DLE_NO_COMP_DIR                      = 141
pub const DW_DLE_CU_ADDRESS_SIZE_BAD              = 142
pub const DW_DLE_INPUT_ATTR_BAD                   = 143
pub const DW_DLE_EXPR_NULL                        = 144
pub const DW_DLE_BAD_EXPR_OPCODE                  = 145
pub const DW_DLE_EXPR_LENGTH_BAD                  = 146
pub const DW_DLE_MULTIPLE_RELOC_IN_EXPR           = 147
pub const DW_DLE_ELF_GETIDENT_ERROR               = 148
pub const DW_DLE_NO_AT_MIPS_FDE                   = 149
pub const DW_DLE_NO_CIE_FOR_FDE                   = 150
pub const DW_DLE_DIE_ABBREV_LIST_NULL             = 151
pub const DW_DLE_DEBUG_FUNCNAMES_DUPLICATE        = 152
pub const DW_DLE_DEBUG_FUNCNAMES_NULL             = 153
pub const DW_DLE_DEBUG_FUNCNAMES_VERSION_ERROR    = 154
pub const DW_DLE_DEBUG_FUNCNAMES_LENGTH_BAD       = 155
pub const DW_DLE_FUNC_NULL                        = 156
pub const DW_DLE_FUNC_CONTEXT_NULL                = 157
pub const DW_DLE_DEBUG_TYPENAMES_DUPLICATE        = 158
pub const DW_DLE_DEBUG_TYPENAMES_NULL             = 159
pub const DW_DLE_DEBUG_TYPENAMES_VERSION_ERROR    = 160
pub const DW_DLE_DEBUG_TYPENAMES_LENGTH_BAD       = 161
pub const DW_DLE_TYPE_NULL                        = 162
pub const DW_DLE_TYPE_CONTEXT_NULL                = 163
pub const DW_DLE_DEBUG_VARNAMES_DUPLICATE         = 164
pub const DW_DLE_DEBUG_VARNAMES_NULL              = 165
pub const DW_DLE_DEBUG_VARNAMES_VERSION_ERROR     = 166
pub const DW_DLE_DEBUG_VARNAMES_LENGTH_BAD        = 167
pub const DW_DLE_VAR_NULL                         = 168
pub const DW_DLE_VAR_CONTEXT_NULL                 = 169
pub const DW_DLE_DEBUG_WEAKNAMES_DUPLICATE        = 170
pub const DW_DLE_DEBUG_WEAKNAMES_NULL             = 171
pub const DW_DLE_DEBUG_WEAKNAMES_VERSION_ERROR    = 172
pub const DW_DLE_DEBUG_WEAKNAMES_LENGTH_BAD       = 173
pub const DW_DLE_WEAK_NULL                        = 174
pub const DW_DLE_WEAK_CONTEXT_NULL                = 175
pub const DW_DLE_LOCDESC_COUNT_WRONG              = 176
pub const DW_DLE_MACINFO_STRING_NULL              = 177
pub const DW_DLE_MACINFO_STRING_EMPTY             = 178
pub const DW_DLE_MACINFO_INTERNAL_ERROR_SPACE     = 179
pub const DW_DLE_MACINFO_MALLOC_FAIL              = 180
pub const DW_DLE_DEBUGMACINFO_ERROR               = 181
pub const DW_DLE_DEBUG_MACRO_LENGTH_BAD           = 182
pub const DW_DLE_DEBUG_MACRO_MAX_BAD              = 183
pub const DW_DLE_DEBUG_MACRO_INTERNAL_ERR         = 184
pub const DW_DLE_DEBUG_MACRO_MALLOC_SPACE         = 185
pub const DW_DLE_DEBUG_MACRO_INCONSISTENT         = 186
pub const DW_DLE_DF_NO_CIE_AUGMENTATION           = 187
pub const DW_DLE_DF_REG_NUM_TOO_HIGH              = 188 
pub const DW_DLE_DF_MAKE_INSTR_NO_INIT            = 189 
pub const DW_DLE_DF_NEW_LOC_LESS_OLD_LOC          = 190
pub const DW_DLE_DF_POP_EMPTY_STACK               = 191
pub const DW_DLE_DF_ALLOC_FAIL                    = 192
pub const DW_DLE_DF_FRAME_DECODING_ERROR          = 193
pub const DW_DLE_DEBUG_LOC_SECTION_SHORT          = 194
pub const DW_DLE_FRAME_AUGMENTATION_UNKNOWN       = 195
pub const DW_DLE_PUBTYPE_CONTEXT                  = 196 /* Unused. */
pub const DW_DLE_DEBUG_PUBTYPES_LENGTH_BAD        = 197
pub const DW_DLE_DEBUG_PUBTYPES_VERSION_ERROR     = 198
pub const DW_DLE_DEBUG_PUBTYPES_DUPLICATE         = 199
pub const DW_DLE_FRAME_CIE_DECODE_ERROR           = 200
pub const DW_DLE_FRAME_REGISTER_UNREPRESENTABLE   = 201
pub const DW_DLE_FRAME_REGISTER_COUNT_MISMATCH    = 202
pub const DW_DLE_LINK_LOOP                        = 203
pub const DW_DLE_STRP_OFFSET_BAD                  = 204
pub const DW_DLE_DEBUG_RANGES_DUPLICATE           = 205
pub const DW_DLE_DEBUG_RANGES_OFFSET_BAD          = 206
pub const DW_DLE_DEBUG_RANGES_MISSING_END         = 207
pub const DW_DLE_DEBUG_RANGES_OUT_OF_MEM          = 208
pub const DW_DLE_DEBUG_SYMTAB_ERR                 = 209
pub const DW_DLE_DEBUG_STRTAB_ERR                 = 210
pub const DW_DLE_RELOC_MISMATCH_INDEX             = 211
pub const DW_DLE_RELOC_MISMATCH_RELOC_INDEX       = 212
pub const DW_DLE_RELOC_MISMATCH_STRTAB_INDEX      = 213
pub const DW_DLE_RELOC_SECTION_MISMATCH           = 214
pub const DW_DLE_RELOC_SECTION_MISSING_INDEX      = 215
pub const DW_DLE_RELOC_SECTION_LENGTH_ODD         = 216
pub const DW_DLE_RELOC_SECTION_PTR_NULL           = 217
pub const DW_DLE_RELOC_SECTION_MALLOC_FAIL        = 218
pub const DW_DLE_NO_ELF64_SUPPORT                 = 219
pub const DW_DLE_MISSING_ELF64_SUPPORT            = 220
pub const DW_DLE_ORPHAN_FDE                       = 221
pub const DW_DLE_DUPLICATE_INST_BLOCK             = 222
pub const DW_DLE_BAD_REF_SIG8_FORM                = 223
pub const DW_DLE_ATTR_EXPRLOC_FORM_BAD            = 224
pub const DW_DLE_FORM_SEC_OFFSET_LENGTH_BAD       = 225
pub const DW_DLE_NOT_REF_FORM                     = 226
pub const DW_DLE_DEBUG_FRAME_LENGTH_NOT_MULTIPLE  = 227
pub const DW_DLE_REF_SIG8_NOT_HANDLED             = 228
pub const DW_DLE_DEBUG_FRAME_POSSIBLE_ADDRESS_BOTCH  = 229
pub const DW_DLE_LOC_BAD_TERMINATION              = 230
pub const DW_DLE_SYMTAB_SECTION_LENGTH_ODD        = 231
pub const DW_DLE_RELOC_SECTION_SYMBOL_INDEX_BAD   = 232
pub const DW_DLE_RELOC_SECTION_RELOC_TARGET_SIZE_UNKNOWN   = 233
pub const DW_DLE_SYMTAB_SECTION_ENTRYSIZE_ZERO    = 234
pub const DW_DLE_LINE_NUMBER_HEADER_ERROR         = 235
pub const DW_DLE_DEBUG_TYPES_NULL                 = 236
pub const DW_DLE_DEBUG_TYPES_DUPLICATE            = 237
pub const DW_DLE_DEBUG_TYPES_ONLY_DWARF4          = 238
pub const DW_DLE_DEBUG_TYPEOFFSET_BAD             = 239
pub const DW_DLE_GNU_OPCODE_ERROR                 = 240
pub const DW_DLE_LAST         = 239
pub const DW_DLE_LO_USER      = 0x10000
pub const DW_FRAME_UNDEFINED_VAL           = 1034
pub const DW_FRAME_SAME_VAL                = 1035
pub const DW_DLV_BADADDR      = (~(Dwarf_Addr)0)   
pub const DW_DLV_NOCOUNT      = ((Dwarf_Signed)-1) 
pub const DW_DLV_BADOFFSET    = (~(Dwarf_Off)0)    
pub const DW_DLX_NO_EH_OFFSET          = (-1LL)
pub const DW_DLX_EH_OFFSET_UNAVAILABLE   = (-2LL)
pub const DWARF_DRD_BUFFER_VERSION  = 2
pub const DW_HARMLESS_ERROR_CIRCULAR_LIST_DEFAULT_SIZE  = 4
pub const DW_HARMLESS_ERROR_MSG_STRING_SIZE    = 200
*/
